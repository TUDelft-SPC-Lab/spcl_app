"""
This type stub file was generated by pyright.
"""

import attr

Axis = ...
rad2deg = ...
deg2rad = ...
@attr.s(slots=True, frozen=True)
class Quaternion:
    """
    q = Quaternion() # defaults to unit (1,0,0,0)
    q = Quaternion(w,x,y,z)

    class properties:
        q.scalar: q.w
        q.vector: (q.x, q.y, q.z)
        q.normalize: return a normalized quaternion
        q.magnitude: returns the magnitude of the quaternion

    class methods:
        q.to_euler: returns (roll, pitch, yaw)
        Quaternion.from_euler: returns a quaternion from euler angles (Z,Y,X)
        q*q: multiply 2 quaternions together
    """
    w = ...
    x = ...
    y = ...
    z = ...
    def __len__(self): # -> Literal[4]:
        """Enables the length function to work: len(q) => 4"""
        ...
    
    def __iter__(self): # -> Generator[float, None, None]:
        """Enables iterating: for i in q: print(i)"""
        ...
    
    def __getitem__(self, indx): # -> float:
        """Enables indexing: q[0] => q.w"""
        ...
    
    def __mul__(self, r): # -> Quaternion:
        """
        Return the quaternion result of multiplication: q*r

        https://www.mathworks.com/help/aeroblks/quaternionmultiplication.html
        """
        ...
    
    def __rmul__(self, r): # -> Quaternion:
        """Would handle things like: 2*q"""
        ...
    
    def __add__(self, r): # -> Quaternion:
        """Would handle things like: qq+q"""
        ...
    
    def __sub__(self, r): # -> Quaternion:
        """Would handle things like: qq-q"""
        ...
    
    def rotate_vec(self, vec):
        """Why would I need this?"""
        ...
    
    def to_dict(self): # -> dict[str, float]:
        """Returns a dictionary"""
        ...
    
    def to_tuple(self): # -> tuple[float, float, float, float]:
        """Returns a tuple"""
        ...
    
    def to_rot(self): # -> tuple[tuple[float, float, float], tuple[float, float, float], tuple[float, float, float]]:
        """
        Given a quaternion, return a 3x3 rotation matrix tuple. You can easily
        turn this into a numpy array with: np.array(q.to_rot())

        https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
        """
        ...
    
    def to_euler(self, degrees=...): # -> tuple[float, float, float]:
        """
        Returns the Euler angles as a tuple(roll, pitch, yaw)

        This is a modified version of this:
        https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
        """
        ...
    
    @property
    def magnitude(self): # -> float:
        """Returns the magnitude of the quaternion"""
        ...
    
    @property
    def conjugate(self): # -> Quaternion:
        """Returns Quaternion(w,-x,-y,-z)"""
        ...
    
    @property
    def normalize(self): # -> Quaternion:
        """
        Returns a normalized a quaterion (unit quaternion) so its
        magnitude is 1.0
        """
        ...
    
    @property
    def scalar(self): # -> float:
        """Returns the scalar component of the quaternion"""
        ...
    
    @property
    def vector(self): # -> tuple[float, float, float]:
        """Returns the vector component of the quaternion"""
        ...
    
    @property
    def angle(self): # -> float:
        """
        returns the angle of rotation (rads)

        https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/
        """
        ...
    
    @property
    def axis(self): # -> tuple[float, float, float]:
        """
        Returns a tuple of the axis of rotation

        https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/
        """
        ...
    
    @staticmethod
    def from_rot(r):
        """Why would I need this?"""
        ...
    
    @staticmethod
    def from_angle_axis(angle, axis, degrees=...): # -> Quaternion:
        """Why would I need this?"""
        ...
    
    @staticmethod
    def from_euler(roll, pitch, yaw, degrees=...): # -> Quaternion:
        """
        Euler angles euler2quat(roll, pitch, yaw, degrees=False), default is radians, but set
        degrees True if giving degrees

        This is a modified version of this:
        https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Quaternion_to_Euler_Angles_Conversion
        """
        ...
    


